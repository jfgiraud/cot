#!/bin/bash

usage() {
    (cat <<-EOF
#BEGIN_DO_NOT_MODIFY:make update-doc
UQAJ(1)                                                        User commands                                                       UQAJ(1)

NAME
       uqaj - split and unquote lines in files

SYNOPSIS
       uqaj [OPTION]... [FILE]...

DESCRIPTION
       Split and unquote lines in files

       With no FILE, or when FILE is -, read standard input.

OPTIONS
       -h
           Display help.

   Unquoting
       -q
           Unquote items with the character '

       -qq
           Unquote items with the character "

       -a string
           Remove prefix specified by string

       -b string
           Remove suffix specified by string

       -c string
           Remove prefix and suffix specified by string

       -p string
           The given string must be <, {, ( or [. Remove the given parenthese and associated closing parenthese of each items.

   Splitting
       -j string
           Split using the given string

       -J
           Split using the character ,

   Before the process of splitting and unquoting
       -A string
           Remove prefix specified by string

       -B string
           Remove suffix specified by string

       -C string
           Remove prefix and suffix specified by string

       -P string
           Remove prefix (parenthese is <, {, ( or [) and suffix (associated parenthese).

EXAMPLES
       Remove prefix before, remove suffix after, split using ,, unquote using {}

           $ s="before{first item},{second  item},{third item}after"
           $ echo $s | uqaj -j, -p'{' -A before -B after
           first item
           second item
           third item

       Remove prefix <, remove suffix >, split using , , unquote using "

           $ s='<"lorem", "ipsum", "dolores", "est">'
           $ echo $s | uqaj -J -A '<' -B '>' -qq
           lorem
           ipsum
           dolores
           est

AUTHOR
       Written by Jean-François Giraud.

COPYRIGHT
       Copyright  © 2020 Jean-François Giraud. License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>. This is free
       software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law.

quote-and-join 0.0.42                                           2023-02-22                                                         UQAJ(1)
#END_DO_NOT_MODIFY:make update-doc
EOF
) | tail -n +4 | head -n -9
    exit 0
}

qchar=''
before=''
after=''
left=''
right=''
join='\n'
trim=''
while getopts ":qhj:JA:a:B:b:c:p:P:t" o
do
  	case "$o" in
		b)
		    right="$OPTARG"
		    ;;
		c)
		    left="$OPTARG"
		    right="$OPTARG"
		    ;;
		h)
		    usage
		    ;;
        j)
            join="$OPTARG"
            ;;
        J)
            join=", "
            ;;
        p)
            if [[ "$OPTARG" == '<' ]]; then
                right=">"
            elif [[ "$OPTARG" == '(' ]]; then
                right=")"
            elif [[ "$OPTARG" == '{' ]]; then
                right="}"
            elif [[ "$OPTARG" == '[' ]]; then
                right="]"
            else
                error 1 "Invalid paren!"
            fi
            left="$OPTARG"
            ;;
        P)
            if [[ "$OPTARG" == '<' ]]; then
                after=">"
            elif [[ "$OPTARG" == '(' ]]; then
                after=")"
            elif [[ "$OPTARG" == '{' ]]; then
                after="}"
            elif [[ "$OPTARG" == '[' ]]; then
                after="]"
            else
                error 1 "Invalid paren!"
            fi
            before="$OPTARG"
            ;;
		q)
            if [[ -z "$qchar" ]]; then
                qchar="'"
            else
                qchar='"'
            fi
            ;;
		a)
		    left="$OPTARG"
		    ;;
		A)
		    before="$OPTARG"
		    ;;
		B)
		    after="$OPTARG"
		    ;;
		t)
		    trim="\s*"
		    ;;
        ?) error 1 $"invalid option -- '$OPTARG'";;
	esac
done

if [[ -n "$qchar" ]]; then
    left="$qchar"
    right="$qchar"
fi

shift $(($OPTIND - 1))

file="$1"
if [[ -z $file ]]; then
    file="-"
fi

# functions
function escaped_search() {
    printf "%s" "$1" | sed 's/[^^]/[&]/g; s/\^/\\^/g' | sed 's/\[\\\]\[n\]/\\n/g'
}


before_escaped=$(escaped_search "${before}")
after_escaped=$(escaped_search "${after}")
left_escaped=$(escaped_search "${left}")
right_escaped=$(escaped_search "${right}")
join_escaped=$(escaped_search "${join}")


while [[ -n "$file" ]];
do
	cat "$file" | sed -ze "1s/^${trim}${before_escaped}${trim}${left_escaped}//" -ze "\$s/${right_escaped}${trim}${after_escaped}${trim}//" -ze "s/${right_escaped}${trim}${join_escaped}${trim}${left_escaped}/\n/g"
	shift
	file="$1"
done

