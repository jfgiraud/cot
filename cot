#!/bin/bash -i


usage() {
	cat <<-EOF
NAME:

        ${0##*/} - quote and join words or lines in files

SYNOPSYS:

        ${0##*/} [ -w | -l | -d <string> ] [ [ -a <string> | -b <string> -c <string> ] | [ -q | -qq ] ] [ -j <string> ] [ [ -s | -S ] | -u ]

        Where:

        Item selector:
             -w   word
             -l   line

        Quote:
             -q  '         (left+right)
             -qq "         (left+right)
             -a  <string>       (left)
             -b  <string>       (right)
             -c  <string>       (left+right)
             -p  <parenthese>   (left+right) where parenthese must be <, {, ( or [
                                right parenthese will be the closing parenthese
             -t   do not trim item
             -e   do not escape parentheses in item

        Sort:
             -s  sort
             -S  sort in reverse order
             -u  remove duplicate items (implies -s or -S option)

        Join items:
             -j  <string>  

        Defaults values are:
             -l
             -qq
             -j'\n'

        Example:

        $ echo lorem ipsum dolores est | ${0##*/} -w -a'<' -b'>' -j# 
        <lorem>#<ipsum>#<dolores>#<est>

        $ echo lorem ipsum dolores est | ${0##*/} -w
        "lorem", "ipsum", "dolores", "est"

        $ echo lorem ipsum dolores est | ${0##*/} -w -p'<' -j# 
        <lorem>#<ipsum>#<dolores>#<est>

With no FILE, or when FILE is -, read standard input.

AUTHOR
	Written by Jean-François Giraud.

COPYRIGHT
	Copyright © 2013 Jean-François Giraud.  License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
	This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law.

EOF
	exit 0
}

error() {
    STATUS="$1"
    MSG="$2"
    cat >&2 <<-EOF
${0##*/}: $MSG
Try \`${0##*/} -h\` for more information.
EOF
    exit 1
}


what='l'
left=''
right=''
strip=1
escape=1
qchar=''
join='\n'
while getopts ":qlwthj:a:b:c:p:usSue" o
do  
	case "$o" in
		h) usage ;;
		l) what='l';;
		w) what='w'
		   strip=1
		   ;;
	        j) join="$OPTARG";;
	        q) if [ -z "$qchar" ]; then
		           qchar="'"
		   else
		           qchar='"'
		   fi
		   ;;
		a) left="$OPTARG"
		   ;;
	        t) strip=0;;
	        e) escape=0;;
		b) right="$OPTARG"
		   ;;
		c) left="$OPTARG"
		   right="$OPTARG"
		   ;;
                p) if [ "$OPTARG" == '<' ]; then
		     right=">"
		   elif [ "$OPTARG" == '(' ]; then
		     right=")"
		   elif [ "$OPTARG" == '{' ]; then
		     right="}"
		   elif [ "$OPTARG" == '[' ]; then
		     right="]"
		   else
		     error 1 "Invalid paren!"
                   fi
		   left="$OPTARG"
		   ;;
	        s) sortorder=""
		   ;;
	        S) sortorder="-r"
		   ;;
	        u) sortunique="-u"
		   ;;
	        ?) error 1 $"invalid option -- '$OPTARG'";;
	esac
done

if [ -n "$qchar" ]; then
    left="$qchar"
    right="$qchar"
fi

shift $(($OPTIND - 1))

file="$1"
if [ -z $file ]; then
        file="-"
fi

shopt -s extglob

function strip() {
    local s="$1"
    s="${s%%+([[:space:]])}"
    s="${s##+([[:space:]])}"
    echo "$s"
}

function escape() {
    local s="$1"
    if [ "$left" == "$right" ]; then
        s=${s//$left/\\$left}
    else
        s=${s//$left/\\$left}
        s=${s//$right/\\$right}
    fi
    echo "$s"
}


function print() {
    local w="$1"
    if [ $strip -eq 1 ]; then
	w=$(strip "$w")
    fi
    if [ $escape -eq 1 ]; then
	w=$(escape "$w")
    fi
    [ -n "$w" ] && echo "$left$w$right"
}

function mysort() {
    if [ -v sortorder -o -v sortunique ]; then
	sort $sortorder $sortunique
    else
	cat
    fi
}

while [ -n "$file" ];
do
	cat "$file" | while IFS=$'\n' read line || [[ $line ]]
	do
	    if [ "$what" == 'l' ]; then
		print "$line"
	    elif [ "$what" == 'w' ]; then
		for word in $line
		do
		    print "$word"
		done
	    fi
	done | mysort | sed ":a;N;\$!ba;s/\n/$join/g"
	shift
	file="$1"
done

